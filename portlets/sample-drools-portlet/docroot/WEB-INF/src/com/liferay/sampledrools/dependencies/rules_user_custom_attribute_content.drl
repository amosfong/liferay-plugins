##
## Rules
##
## This sample program will return personalized content based on the user's
## networth set in the My Account - Custom Fields section of the Control Panel.
##
## For example, suppose the current user has a net worth of 150,000 and is a
## member of the Liferay community. All assets within the Liferay community
## that are tagged with "affluent" will be returned.
##

package com.liferay.sampledrools.dependencies;

import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.search.Document;
import com.liferay.portal.kernel.search.FacetedSearcher;
import com.liferay.portal.kernel.search.Field;
import com.liferay.portal.kernel.search.Hits;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.SearchContext;
import com.liferay.portal.kernel.search.facet.AssetEntriesFacet;
import com.liferay.portal.kernel.search.facet.Facet;
import com.liferay.portal.kernel.search.facet.MultiValueFacet;
import com.liferay.portal.kernel.search.facet.ScopeFacet;
import com.liferay.portal.kernel.search.facet.config.FacetConfiguration;
import com.liferay.portal.kernel.search.facet.config.FacetConfigurationUtil;
import com.liferay.portal.kernel.search.facet.util.FacetFactoryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.KeyValuePair;
import com.liferay.portal.kernel.util.ObjectValuePair;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.model.Group;
import com.liferay.portal.model.User;
import com.liferay.portal.security.auth.PrincipalThreadLocal;
import com.liferay.portal.security.permission.PermissionChecker;
import com.liferay.portal.security.permission.PermissionCheckerFactoryUtil;
import com.liferay.portal.security.permission.PermissionThreadLocal;
import com.liferay.portal.util.PortalUtil;
import com.liferay.portlet.asset.model.AssetEntry;
import com.liferay.portlet.asset.service.AssetEntryLocalServiceUtil;
import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

dialect "java"

function List getAssetEntries(
	User user, long[] classNameIds, String assetTagName) {

	List<Group> groups = user.getMySites();

	long[] groupIds = new long[groups.size()];

	for (int i = 0; i < groups.size(); i++) {
		Group group = groups.get(i);

		groupIds[i] = group.getGroupId();
	}

	String[] keywords = assetTagName.split("\\s+");

	for (int i = 0; i < keywords.length; i++) {
		keywords[i] = keywords[i].toLowerCase();
	}

	if ((classNameIds == null) || (classNameIds.length == 0) ||
		(groupIds.length == 0) || (keywords.length ==0)) {

		return Collections.emptyList();
	}

	SearchContext searchContext = new SearchContext();

	searchContext.setAttribute(
		Field.ASSET_TAG_NAMES, StringUtil.merge(keywords));
	searchContext.setAttribute("paginationType", "regular");
	searchContext.setCompanyId(user.getCompanyId());
	searchContext.setIncludeStagingGroups(false);
	searchContext.setScopeStrict(false);
	searchContext.setUserId(user.getUserId());

	JSONObject searchConfigurationJSONObject =
		JSONFactoryUtil.createJSONObject();

	JSONArray facetsJSONArray = JSONFactoryUtil.createJSONArray();

	facetsJSONArray.put(getAssetEntriesFacetJSONObject(classNameIds));
	facetsJSONArray.put(getMultiValueFacetJSONObject());
	facetsJSONArray.put(getScopeFacetJSONObject(groupIds));

	searchConfigurationJSONObject.put("facets", facetsJSONArray);

	List<FacetConfiguration> facetConfigurations =
		FacetConfigurationUtil.load(searchConfigurationJSONObject.toString());

	for (FacetConfiguration facetConfiguration : facetConfigurations) {
		Facet facet = FacetFactoryUtil.create(
			searchContext, facetConfiguration);

		searchContext.addFacet(facet);
	}

	Indexer indexer = FacetedSearcher.getInstance();

	Hits hits = indexer.search(searchContext);

	List<AssetEntry> assetEntries = new ArrayList<AssetEntry>();

	for (int i = 0; i < hits.getDocs().length; i++) {
		Document document = hits.doc(i);

		String entryClassName = document.get(Field.ENTRY_CLASS_NAME);

		long entryClassPK = GetterUtil.getLong(
			document.get(Field.ENTRY_CLASS_PK));
		long rootEntryClassPK = GetterUtil.getLong(
			document.get(Field.ROOT_ENTRY_CLASS_PK));

		if (rootEntryClassPK > 0) {
			entryClassPK = rootEntryClassPK;
		}

		AssetEntry assetEntry = AssetEntryLocalServiceUtil.fetchEntry(
			entryClassName, entryClassPK);

		if (assetEntry != null) {
			assetEntries.add(assetEntry);
		}
	}

	return assetEntries;
}

function JSONObject getAssetEntriesFacetJSONObject(long[] classNameIds) {
	JSONObject assetEntriesFacetJSONObject = JSONFactoryUtil.createJSONObject();

	assetEntriesFacetJSONObject.put(
		"className", AssetEntriesFacet.class.getName());

	JSONObject dataJSONObject = JSONFactoryUtil.createJSONObject();

	JSONArray valuesJSONArray = JSONFactoryUtil.createJSONArray();

	for (long classNameId : classNameIds) {
		valuesJSONArray.put(PortalUtil.getClassName(classNameId));
	}

	dataJSONObject.put("values", valuesJSONArray);

	assetEntriesFacetJSONObject.put("data", dataJSONObject);
	assetEntriesFacetJSONObject.put("order", "OrderHitsDesc");
	assetEntriesFacetJSONObject.put("static", false);

	return assetEntriesFacetJSONObject;
}

function JSONObject getMultiValueFacetJSONObject() {
	JSONObject multiValueFacetJSONObject = JSONFactoryUtil.createJSONObject();

	multiValueFacetJSONObject.put("className", MultiValueFacet.class.getName());
	multiValueFacetJSONObject.put("fieldName", Field.ASSET_TAG_NAMES);
	multiValueFacetJSONObject.put("order", "OrderHitsDesc");
	multiValueFacetJSONObject.put("static", false);

	return multiValueFacetJSONObject;
}

function JSONObject getScopeFacetJSONObject(long[] groupIds) {
	JSONObject scopeFacetJSONObject = JSONFactoryUtil.createJSONObject();

	scopeFacetJSONObject.put("className", ScopeFacet.class.getName());

	JSONObject dataJSONObject = JSONFactoryUtil.createJSONObject();

	JSONArray valuesJSONArray = JSONFactoryUtil.createJSONArray();

	for (long groupId : groupIds) {
		valuesJSONArray.put(groupId);
	}

	dataJSONObject.put("values", valuesJSONArray);

	scopeFacetJSONObject.put("data", dataJSONObject);
	scopeFacetJSONObject.put("order", "OrderHitsDesc");
	scopeFacetJSONObject.put("static", false);

	return scopeFacetJSONObject;
}

function Map getUserCustomAttributes(
	User user, String[] userCustomAttributeNames) {

	String contextName = PrincipalThreadLocal.getName();

	PermissionChecker contextPermissionChecker =
		PermissionThreadLocal.getPermissionChecker();

	PrincipalThreadLocal.setName(user.getUserId());

	PermissionChecker permissionChecker =
		PermissionCheckerFactoryUtil.create(user, true);

	PermissionThreadLocal.setPermissionChecker(permissionChecker);

	try {
		ExpandoBridge expandoBridge = user.getExpandoBridge();

		Map<String, Serializable> userCustomAttributes =
			new HashMap<String, Serializable> ();

		for (String userCustomAttributeName : userCustomAttributeNames) {
			Serializable userCustomAttributeValue = expandoBridge.getAttribute(
				userCustomAttributeName);

			userCustomAttributes.put(
				userCustomAttributeName, userCustomAttributeValue);
		}

		return userCustomAttributes;
	}
	finally {
		PrincipalThreadLocal.setName(contextName);

		PermissionThreadLocal.setPermissionChecker(contextPermissionChecker);
	}
}

rule "Initialize Rules"
	salience 1000
	when
		user : User();
		userCustomAttributeNames :
			KeyValuePair(key == "userCustomAttributeNames");
	then
		Map<String, Serializable> userCustomAttributes =
			getUserCustomAttributes(
				user, StringUtil.split(userCustomAttributeNames.getValue()));

		Iterator<Map.Entry<String, Serializable>> itr =
			userCustomAttributes.entrySet().iterator();

		while (itr.hasNext()) {
			Map.Entry<String, Serializable> entry = itr.next();

			String key = entry.getKey();
			Serializable value = entry.getValue();

			insertLogical(new ObjectValuePair(key, value));
		}
end

rule "Get Affluent Content"
	when
		classNameIds : KeyValuePair(key == "classNameIds");
		results : List();
		user : User();
		userCustomAttribute : ObjectValuePair(
			(key == "networth") && (value >= 100000));
	then
		List<AssetEntry> assetEntries = getAssetEntries(
			user, StringUtil.split(classNameIds.getValue(), 0L), "affluent");

		assetEntries.removeAll(results);

		modify(results) {
			addAll(assetEntries);
		};

		retract(userCustomAttribute);
end

rule "Get Regular Content"
	when
		classNameIds : KeyValuePair(key == "classNameIds");
		results : List();
		user : User();
		userCustomAttribute : ObjectValuePair(
			(key == "networth") && (value < 100000));
	then
		List<AssetEntry> assetEntries = getAssetEntries(
			user, StringUtil.split(classNameIds.getValue(), 0L), "regular");

		assetEntries.removeAll(results);

		modify(results) {
			addAll(assetEntries);
		};

		retract(userCustomAttribute);
end