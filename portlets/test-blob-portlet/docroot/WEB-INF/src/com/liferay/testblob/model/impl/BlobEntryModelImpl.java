/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.testblob.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.testblob.model.BlobEntry;
import com.liferay.testblob.model.BlobEntryBlobFieldBlobModel;
import com.liferay.testblob.model.BlobEntryModel;
import com.liferay.testblob.service.BlobEntryLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BlobEntry service. Represents a row in the &quot;TestBlob_BlobEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.testblob.model.BlobEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BlobEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BlobEntryImpl
 * @see com.liferay.testblob.model.BlobEntry
 * @see com.liferay.testblob.model.BlobEntryModel
 * @generated
 */
public class BlobEntryModelImpl extends BaseModelImpl<BlobEntry>
	implements BlobEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a blob entry model instance should use the {@link com.liferay.testblob.model.BlobEntry} interface instead.
	 */
	public static final String TABLE_NAME = "TestBlob_BlobEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "testBlobEntryId", Types.BIGINT },
			{ "blobField", Types.BLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table TestBlob_BlobEntry (uuid_ VARCHAR(75) null,testBlobEntryId LONG not null primary key,blobField BLOB)";
	public static final String TABLE_SQL_DROP = "drop table TestBlob_BlobEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY blobEntry.testBlobEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TestBlob_BlobEntry.testBlobEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.testblob.model.BlobEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.testblob.model.BlobEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.testblob.model.BlobEntry"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;
	public static long TESTBLOBENTRYID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.testblob.model.BlobEntry"));

	public BlobEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _testBlobEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTestBlobEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _testBlobEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BlobEntry.class;
	}

	@Override
	public String getModelClassName() {
		return BlobEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("testBlobEntryId", getTestBlobEntryId());
		attributes.put("blobField", getBlobField());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long testBlobEntryId = (Long)attributes.get("testBlobEntryId");

		if (testBlobEntryId != null) {
			setTestBlobEntryId(testBlobEntryId);
		}

		Blob blobField = (Blob)attributes.get("blobField");

		if (blobField != null) {
			setBlobField(blobField);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getTestBlobEntryId() {
		return _testBlobEntryId;
	}

	@Override
	public void setTestBlobEntryId(long testBlobEntryId) {
		_testBlobEntryId = testBlobEntryId;
	}

	@Override
	public Blob getBlobField() {
		if (_blobFieldBlobModel == null) {
			try {
				_blobFieldBlobModel = BlobEntryLocalServiceUtil.getBlobFieldBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_blobFieldBlobModel != null) {
			blob = _blobFieldBlobModel.getBlobFieldBlob();
		}

		return blob;
	}

	@Override
	public void setBlobField(Blob blobField) {
		if (_blobFieldBlobModel == null) {
			_blobFieldBlobModel = new BlobEntryBlobFieldBlobModel(getPrimaryKey(),
					blobField);
		}
		else {
			_blobFieldBlobModel.setBlobFieldBlob(blobField);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BlobEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BlobEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BlobEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BlobEntryImpl blobEntryImpl = new BlobEntryImpl();

		blobEntryImpl.setUuid(getUuid());
		blobEntryImpl.setTestBlobEntryId(getTestBlobEntryId());

		blobEntryImpl.resetOriginalValues();

		return blobEntryImpl;
	}

	@Override
	public int compareTo(BlobEntry blobEntry) {
		long primaryKey = blobEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BlobEntry)) {
			return false;
		}

		BlobEntry blobEntry = (BlobEntry)obj;

		long primaryKey = blobEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BlobEntryModelImpl blobEntryModelImpl = this;

		blobEntryModelImpl._originalUuid = blobEntryModelImpl._uuid;

		blobEntryModelImpl._blobFieldBlobModel = null;

		blobEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BlobEntry> toCacheModel() {
		BlobEntryCacheModel blobEntryCacheModel = new BlobEntryCacheModel();

		blobEntryCacheModel.uuid = getUuid();

		String uuid = blobEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			blobEntryCacheModel.uuid = null;
		}

		blobEntryCacheModel.testBlobEntryId = getTestBlobEntryId();

		return blobEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", testBlobEntryId=");
		sb.append(getTestBlobEntryId());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.testblob.model.BlobEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testBlobEntryId</column-name><column-value><![CDATA[");
		sb.append(getTestBlobEntryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BlobEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BlobEntry.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _testBlobEntryId;
	private BlobEntryBlobFieldBlobModel _blobFieldBlobModel;
	private long _columnBitmask;
	private BlobEntry _escapedModel;
}