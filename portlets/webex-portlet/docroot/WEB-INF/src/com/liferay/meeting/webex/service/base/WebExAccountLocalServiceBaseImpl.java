/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.meeting.webex.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.meeting.webex.model.WebExAccount;
import com.liferay.meeting.webex.service.WebExAccountLocalService;
import com.liferay.meeting.webex.service.WebExAccountService;
import com.liferay.meeting.webex.service.WebExSiteLocalService;
import com.liferay.meeting.webex.service.WebExSiteService;
import com.liferay.meeting.webex.service.persistence.WebExAccountPersistence;
import com.liferay.meeting.webex.service.persistence.WebExSitePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.expando.service.ExpandoValueLocalService;
import com.liferay.portlet.expando.service.ExpandoValueService;
import com.liferay.portlet.expando.service.persistence.ExpandoValuePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the web ex account local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.meeting.webex.service.impl.WebExAccountLocalServiceImpl}.
 * </p>
 *
 * @author Anant Singh
 * @see com.liferay.meeting.webex.service.impl.WebExAccountLocalServiceImpl
 * @see com.liferay.meeting.webex.service.WebExAccountLocalServiceUtil
 * @generated
 */
public abstract class WebExAccountLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements WebExAccountLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.meeting.webex.service.WebExAccountLocalServiceUtil} to access the web ex account local service.
	 */

	/**
	 * Adds the web ex account to the database. Also notifies the appropriate model listeners.
	 *
	 * @param webExAccount the web ex account
	 * @return the web ex account that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public WebExAccount addWebExAccount(WebExAccount webExAccount)
		throws SystemException {
		webExAccount.setNew(true);

		return webExAccountPersistence.update(webExAccount, false);
	}

	/**
	 * Creates a new web ex account with the primary key. Does not add the web ex account to the database.
	 *
	 * @param webExAccountId the primary key for the new web ex account
	 * @return the new web ex account
	 */
	public WebExAccount createWebExAccount(long webExAccountId) {
		return webExAccountPersistence.create(webExAccountId);
	}

	/**
	 * Deletes the web ex account with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param webExAccountId the primary key of the web ex account
	 * @return the web ex account that was removed
	 * @throws PortalException if a web ex account with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public WebExAccount deleteWebExAccount(long webExAccountId)
		throws PortalException, SystemException {
		return webExAccountPersistence.remove(webExAccountId);
	}

	/**
	 * Deletes the web ex account from the database. Also notifies the appropriate model listeners.
	 *
	 * @param webExAccount the web ex account
	 * @return the web ex account that was removed
	 * @throws PortalException
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public WebExAccount deleteWebExAccount(WebExAccount webExAccount)
		throws PortalException, SystemException {
		return webExAccountPersistence.remove(webExAccount);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(WebExAccount.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return webExAccountPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return webExAccountPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return webExAccountPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return webExAccountPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public WebExAccount fetchWebExAccount(long webExAccountId)
		throws SystemException {
		return webExAccountPersistence.fetchByPrimaryKey(webExAccountId);
	}

	/**
	 * Returns the web ex account with the primary key.
	 *
	 * @param webExAccountId the primary key of the web ex account
	 * @return the web ex account
	 * @throws PortalException if a web ex account with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public WebExAccount getWebExAccount(long webExAccountId)
		throws PortalException, SystemException {
		return webExAccountPersistence.findByPrimaryKey(webExAccountId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return webExAccountPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the web ex account with the UUID in the group.
	 *
	 * @param uuid the UUID of web ex account
	 * @param groupId the group id of the web ex account
	 * @return the web ex account
	 * @throws PortalException if a web ex account with the UUID in the group could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public WebExAccount getWebExAccountByUuidAndGroupId(String uuid,
		long groupId) throws PortalException, SystemException {
		return webExAccountPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the web ex accounts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of web ex accounts
	 * @param end the upper bound of the range of web ex accounts (not inclusive)
	 * @return the range of web ex accounts
	 * @throws SystemException if a system exception occurred
	 */
	public List<WebExAccount> getWebExAccounts(int start, int end)
		throws SystemException {
		return webExAccountPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of web ex accounts.
	 *
	 * @return the number of web ex accounts
	 * @throws SystemException if a system exception occurred
	 */
	public int getWebExAccountsCount() throws SystemException {
		return webExAccountPersistence.countAll();
	}

	/**
	 * Updates the web ex account in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param webExAccount the web ex account
	 * @return the web ex account that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public WebExAccount updateWebExAccount(WebExAccount webExAccount)
		throws SystemException {
		return updateWebExAccount(webExAccount, true);
	}

	/**
	 * Updates the web ex account in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param webExAccount the web ex account
	 * @param merge whether to merge the web ex account with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the web ex account that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public WebExAccount updateWebExAccount(WebExAccount webExAccount,
		boolean merge) throws SystemException {
		webExAccount.setNew(false);

		return webExAccountPersistence.update(webExAccount, merge);
	}

	/**
	 * Returns the web ex account local service.
	 *
	 * @return the web ex account local service
	 */
	public WebExAccountLocalService getWebExAccountLocalService() {
		return webExAccountLocalService;
	}

	/**
	 * Sets the web ex account local service.
	 *
	 * @param webExAccountLocalService the web ex account local service
	 */
	public void setWebExAccountLocalService(
		WebExAccountLocalService webExAccountLocalService) {
		this.webExAccountLocalService = webExAccountLocalService;
	}

	/**
	 * Returns the web ex account remote service.
	 *
	 * @return the web ex account remote service
	 */
	public WebExAccountService getWebExAccountService() {
		return webExAccountService;
	}

	/**
	 * Sets the web ex account remote service.
	 *
	 * @param webExAccountService the web ex account remote service
	 */
	public void setWebExAccountService(WebExAccountService webExAccountService) {
		this.webExAccountService = webExAccountService;
	}

	/**
	 * Returns the web ex account persistence.
	 *
	 * @return the web ex account persistence
	 */
	public WebExAccountPersistence getWebExAccountPersistence() {
		return webExAccountPersistence;
	}

	/**
	 * Sets the web ex account persistence.
	 *
	 * @param webExAccountPersistence the web ex account persistence
	 */
	public void setWebExAccountPersistence(
		WebExAccountPersistence webExAccountPersistence) {
		this.webExAccountPersistence = webExAccountPersistence;
	}

	/**
	 * Returns the web ex site local service.
	 *
	 * @return the web ex site local service
	 */
	public WebExSiteLocalService getWebExSiteLocalService() {
		return webExSiteLocalService;
	}

	/**
	 * Sets the web ex site local service.
	 *
	 * @param webExSiteLocalService the web ex site local service
	 */
	public void setWebExSiteLocalService(
		WebExSiteLocalService webExSiteLocalService) {
		this.webExSiteLocalService = webExSiteLocalService;
	}

	/**
	 * Returns the web ex site remote service.
	 *
	 * @return the web ex site remote service
	 */
	public WebExSiteService getWebExSiteService() {
		return webExSiteService;
	}

	/**
	 * Sets the web ex site remote service.
	 *
	 * @param webExSiteService the web ex site remote service
	 */
	public void setWebExSiteService(WebExSiteService webExSiteService) {
		this.webExSiteService = webExSiteService;
	}

	/**
	 * Returns the web ex site persistence.
	 *
	 * @return the web ex site persistence
	 */
	public WebExSitePersistence getWebExSitePersistence() {
		return webExSitePersistence;
	}

	/**
	 * Sets the web ex site persistence.
	 *
	 * @param webExSitePersistence the web ex site persistence
	 */
	public void setWebExSitePersistence(
		WebExSitePersistence webExSitePersistence) {
		this.webExSitePersistence = webExSitePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the expando value local service.
	 *
	 * @return the expando value local service
	 */
	public ExpandoValueLocalService getExpandoValueLocalService() {
		return expandoValueLocalService;
	}

	/**
	 * Sets the expando value local service.
	 *
	 * @param expandoValueLocalService the expando value local service
	 */
	public void setExpandoValueLocalService(
		ExpandoValueLocalService expandoValueLocalService) {
		this.expandoValueLocalService = expandoValueLocalService;
	}

	/**
	 * Returns the expando value remote service.
	 *
	 * @return the expando value remote service
	 */
	public ExpandoValueService getExpandoValueService() {
		return expandoValueService;
	}

	/**
	 * Sets the expando value remote service.
	 *
	 * @param expandoValueService the expando value remote service
	 */
	public void setExpandoValueService(ExpandoValueService expandoValueService) {
		this.expandoValueService = expandoValueService;
	}

	/**
	 * Returns the expando value persistence.
	 *
	 * @return the expando value persistence
	 */
	public ExpandoValuePersistence getExpandoValuePersistence() {
		return expandoValuePersistence;
	}

	/**
	 * Sets the expando value persistence.
	 *
	 * @param expandoValuePersistence the expando value persistence
	 */
	public void setExpandoValuePersistence(
		ExpandoValuePersistence expandoValuePersistence) {
		this.expandoValuePersistence = expandoValuePersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.meeting.webex.model.WebExAccount",
			webExAccountLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.meeting.webex.model.WebExAccount");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return WebExAccount.class;
	}

	protected String getModelClassName() {
		return WebExAccount.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = webExAccountPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = WebExAccountLocalService.class)
	protected WebExAccountLocalService webExAccountLocalService;
	@BeanReference(type = WebExAccountService.class)
	protected WebExAccountService webExAccountService;
	@BeanReference(type = WebExAccountPersistence.class)
	protected WebExAccountPersistence webExAccountPersistence;
	@BeanReference(type = WebExSiteLocalService.class)
	protected WebExSiteLocalService webExSiteLocalService;
	@BeanReference(type = WebExSiteService.class)
	protected WebExSiteService webExSiteService;
	@BeanReference(type = WebExSitePersistence.class)
	protected WebExSitePersistence webExSitePersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = ExpandoValueLocalService.class)
	protected ExpandoValueLocalService expandoValueLocalService;
	@BeanReference(type = ExpandoValueService.class)
	protected ExpandoValueService expandoValueService;
	@BeanReference(type = ExpandoValuePersistence.class)
	protected ExpandoValuePersistence expandoValuePersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private WebExAccountLocalServiceClpInvoker _clpInvoker = new WebExAccountLocalServiceClpInvoker();
}