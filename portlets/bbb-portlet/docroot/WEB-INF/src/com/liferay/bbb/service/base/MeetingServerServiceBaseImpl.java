/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.bbb.service.base;

import com.liferay.bbb.model.MeetingServer;
import com.liferay.bbb.service.MeetingServerService;
import com.liferay.bbb.service.persistence.MeetingEntryPersistence;
import com.liferay.bbb.service.persistence.MeetingParticipantPersistence;
import com.liferay.bbb.service.persistence.MeetingServerPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBFactoryUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.util.PortalUtil;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the meeting server remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.bbb.service.impl.MeetingServerServiceImpl}.
 * </p>
 *
 * @author Shinn Lok
 * @see com.liferay.bbb.service.impl.MeetingServerServiceImpl
 * @see com.liferay.bbb.service.MeetingServerServiceUtil
 * @generated
 */
public abstract class MeetingServerServiceBaseImpl extends BaseServiceImpl
	implements MeetingServerService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.bbb.service.MeetingServerServiceUtil} to access the meeting server remote service.
	 */

	/**
	 * Returns the meeting entry local service.
	 *
	 * @return the meeting entry local service
	 */
	public com.liferay.bbb.service.MeetingEntryLocalService getMeetingEntryLocalService() {
		return meetingEntryLocalService;
	}

	/**
	 * Sets the meeting entry local service.
	 *
	 * @param meetingEntryLocalService the meeting entry local service
	 */
	public void setMeetingEntryLocalService(
		com.liferay.bbb.service.MeetingEntryLocalService meetingEntryLocalService) {
		this.meetingEntryLocalService = meetingEntryLocalService;
	}

	/**
	 * Returns the meeting entry remote service.
	 *
	 * @return the meeting entry remote service
	 */
	public com.liferay.bbb.service.MeetingEntryService getMeetingEntryService() {
		return meetingEntryService;
	}

	/**
	 * Sets the meeting entry remote service.
	 *
	 * @param meetingEntryService the meeting entry remote service
	 */
	public void setMeetingEntryService(
		com.liferay.bbb.service.MeetingEntryService meetingEntryService) {
		this.meetingEntryService = meetingEntryService;
	}

	/**
	 * Returns the meeting entry persistence.
	 *
	 * @return the meeting entry persistence
	 */
	public MeetingEntryPersistence getMeetingEntryPersistence() {
		return meetingEntryPersistence;
	}

	/**
	 * Sets the meeting entry persistence.
	 *
	 * @param meetingEntryPersistence the meeting entry persistence
	 */
	public void setMeetingEntryPersistence(
		MeetingEntryPersistence meetingEntryPersistence) {
		this.meetingEntryPersistence = meetingEntryPersistence;
	}

	/**
	 * Returns the meeting participant local service.
	 *
	 * @return the meeting participant local service
	 */
	public com.liferay.bbb.service.MeetingParticipantLocalService getMeetingParticipantLocalService() {
		return meetingParticipantLocalService;
	}

	/**
	 * Sets the meeting participant local service.
	 *
	 * @param meetingParticipantLocalService the meeting participant local service
	 */
	public void setMeetingParticipantLocalService(
		com.liferay.bbb.service.MeetingParticipantLocalService meetingParticipantLocalService) {
		this.meetingParticipantLocalService = meetingParticipantLocalService;
	}

	/**
	 * Returns the meeting participant remote service.
	 *
	 * @return the meeting participant remote service
	 */
	public com.liferay.bbb.service.MeetingParticipantService getMeetingParticipantService() {
		return meetingParticipantService;
	}

	/**
	 * Sets the meeting participant remote service.
	 *
	 * @param meetingParticipantService the meeting participant remote service
	 */
	public void setMeetingParticipantService(
		com.liferay.bbb.service.MeetingParticipantService meetingParticipantService) {
		this.meetingParticipantService = meetingParticipantService;
	}

	/**
	 * Returns the meeting participant persistence.
	 *
	 * @return the meeting participant persistence
	 */
	public MeetingParticipantPersistence getMeetingParticipantPersistence() {
		return meetingParticipantPersistence;
	}

	/**
	 * Sets the meeting participant persistence.
	 *
	 * @param meetingParticipantPersistence the meeting participant persistence
	 */
	public void setMeetingParticipantPersistence(
		MeetingParticipantPersistence meetingParticipantPersistence) {
		this.meetingParticipantPersistence = meetingParticipantPersistence;
	}

	/**
	 * Returns the meeting server local service.
	 *
	 * @return the meeting server local service
	 */
	public com.liferay.bbb.service.MeetingServerLocalService getMeetingServerLocalService() {
		return meetingServerLocalService;
	}

	/**
	 * Sets the meeting server local service.
	 *
	 * @param meetingServerLocalService the meeting server local service
	 */
	public void setMeetingServerLocalService(
		com.liferay.bbb.service.MeetingServerLocalService meetingServerLocalService) {
		this.meetingServerLocalService = meetingServerLocalService;
	}

	/**
	 * Returns the meeting server remote service.
	 *
	 * @return the meeting server remote service
	 */
	public com.liferay.bbb.service.MeetingServerService getMeetingServerService() {
		return meetingServerService;
	}

	/**
	 * Sets the meeting server remote service.
	 *
	 * @param meetingServerService the meeting server remote service
	 */
	public void setMeetingServerService(
		com.liferay.bbb.service.MeetingServerService meetingServerService) {
		this.meetingServerService = meetingServerService;
	}

	/**
	 * Returns the meeting server persistence.
	 *
	 * @return the meeting server persistence
	 */
	public MeetingServerPersistence getMeetingServerPersistence() {
		return meetingServerPersistence;
	}

	/**
	 * Sets the meeting server persistence.
	 *
	 * @param meetingServerPersistence the meeting server persistence
	 */
	public void setMeetingServerPersistence(
		MeetingServerPersistence meetingServerPersistence) {
		this.meetingServerPersistence = meetingServerPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return MeetingServer.class;
	}

	protected String getModelClassName() {
		return MeetingServer.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = meetingServerPersistence.getDataSource();

			DB db = DBFactoryUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.bbb.service.MeetingEntryLocalService.class)
	protected com.liferay.bbb.service.MeetingEntryLocalService meetingEntryLocalService;
	@BeanReference(type = com.liferay.bbb.service.MeetingEntryService.class)
	protected com.liferay.bbb.service.MeetingEntryService meetingEntryService;
	@BeanReference(type = MeetingEntryPersistence.class)
	protected MeetingEntryPersistence meetingEntryPersistence;
	@BeanReference(type = com.liferay.bbb.service.MeetingParticipantLocalService.class)
	protected com.liferay.bbb.service.MeetingParticipantLocalService meetingParticipantLocalService;
	@BeanReference(type = com.liferay.bbb.service.MeetingParticipantService.class)
	protected com.liferay.bbb.service.MeetingParticipantService meetingParticipantService;
	@BeanReference(type = MeetingParticipantPersistence.class)
	protected MeetingParticipantPersistence meetingParticipantPersistence;
	@BeanReference(type = com.liferay.bbb.service.MeetingServerLocalService.class)
	protected com.liferay.bbb.service.MeetingServerLocalService meetingServerLocalService;
	@BeanReference(type = com.liferay.bbb.service.MeetingServerService.class)
	protected com.liferay.bbb.service.MeetingServerService meetingServerService;
	@BeanReference(type = MeetingServerPersistence.class)
	protected MeetingServerPersistence meetingServerPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private MeetingServerServiceClpInvoker _clpInvoker = new MeetingServerServiceClpInvoker();
}