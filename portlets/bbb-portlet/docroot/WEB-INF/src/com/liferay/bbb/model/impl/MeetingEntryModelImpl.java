/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.bbb.model.impl;

import com.liferay.bbb.model.MeetingEntry;
import com.liferay.bbb.model.MeetingEntryModel;
import com.liferay.bbb.model.MeetingEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MeetingEntry service. Represents a row in the &quot;BBB_MeetingEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.bbb.model.MeetingEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MeetingEntryImpl}.
 * </p>
 *
 * @author Shinn Lok
 * @see MeetingEntryImpl
 * @see com.liferay.bbb.model.MeetingEntry
 * @see com.liferay.bbb.model.MeetingEntryModel
 * @generated
 */
@JSON(strict = true)
public class MeetingEntryModelImpl extends BaseModelImpl<MeetingEntry>
	implements MeetingEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a meeting entry model instance should use the {@link com.liferay.bbb.model.MeetingEntry} interface instead.
	 */
	public static final String TABLE_NAME = "BBB_MeetingEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "meetingEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "meetingServerId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "attendeePassword", Types.VARCHAR },
			{ "moderatorPassword", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table BBB_MeetingEntry (meetingEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,meetingServerId LONG,name VARCHAR(75) null,attendeePassword VARCHAR(75) null,moderatorPassword VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table BBB_MeetingEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY meetingEntry.meetingEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BBB_MeetingEntry.meetingEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.bbb.model.MeetingEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.bbb.model.MeetingEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.bbb.model.MeetingEntry"),
			true);
	public static long MEETINGSERVERID_COLUMN_BITMASK = 1L;
	public static long MEETINGENTRYID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MeetingEntry toModel(MeetingEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MeetingEntry model = new MeetingEntryImpl();

		model.setMeetingEntryId(soapModel.getMeetingEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMeetingServerId(soapModel.getMeetingServerId());
		model.setName(soapModel.getName());
		model.setAttendeePassword(soapModel.getAttendeePassword());
		model.setModeratorPassword(soapModel.getModeratorPassword());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MeetingEntry> toModels(MeetingEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MeetingEntry> models = new ArrayList<MeetingEntry>(soapModels.length);

		for (MeetingEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.bbb.model.MeetingEntry"));

	public MeetingEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _meetingEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMeetingEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _meetingEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MeetingEntry.class;
	}

	@Override
	public String getModelClassName() {
		return MeetingEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("meetingEntryId", getMeetingEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("meetingServerId", getMeetingServerId());
		attributes.put("name", getName());
		attributes.put("attendeePassword", getAttendeePassword());
		attributes.put("moderatorPassword", getModeratorPassword());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long meetingEntryId = (Long)attributes.get("meetingEntryId");

		if (meetingEntryId != null) {
			setMeetingEntryId(meetingEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long meetingServerId = (Long)attributes.get("meetingServerId");

		if (meetingServerId != null) {
			setMeetingServerId(meetingServerId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String attendeePassword = (String)attributes.get("attendeePassword");

		if (attendeePassword != null) {
			setAttendeePassword(attendeePassword);
		}

		String moderatorPassword = (String)attributes.get("moderatorPassword");

		if (moderatorPassword != null) {
			setModeratorPassword(moderatorPassword);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getMeetingEntryId() {
		return _meetingEntryId;
	}

	@Override
	public void setMeetingEntryId(long meetingEntryId) {
		_meetingEntryId = meetingEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getMeetingServerId() {
		return _meetingServerId;
	}

	@Override
	public void setMeetingServerId(long meetingServerId) {
		_columnBitmask |= MEETINGSERVERID_COLUMN_BITMASK;

		if (!_setOriginalMeetingServerId) {
			_setOriginalMeetingServerId = true;

			_originalMeetingServerId = _meetingServerId;
		}

		_meetingServerId = meetingServerId;
	}

	public long getOriginalMeetingServerId() {
		return _originalMeetingServerId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getAttendeePassword() {
		if (_attendeePassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _attendeePassword;
		}
	}

	@Override
	public void setAttendeePassword(String attendeePassword) {
		_attendeePassword = attendeePassword;
	}

	@JSON
	@Override
	public String getModeratorPassword() {
		if (_moderatorPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _moderatorPassword;
		}
	}

	@Override
	public void setModeratorPassword(String moderatorPassword) {
		_moderatorPassword = moderatorPassword;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MeetingEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MeetingEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MeetingEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MeetingEntryImpl meetingEntryImpl = new MeetingEntryImpl();

		meetingEntryImpl.setMeetingEntryId(getMeetingEntryId());
		meetingEntryImpl.setGroupId(getGroupId());
		meetingEntryImpl.setCompanyId(getCompanyId());
		meetingEntryImpl.setUserId(getUserId());
		meetingEntryImpl.setUserName(getUserName());
		meetingEntryImpl.setCreateDate(getCreateDate());
		meetingEntryImpl.setModifiedDate(getModifiedDate());
		meetingEntryImpl.setMeetingServerId(getMeetingServerId());
		meetingEntryImpl.setName(getName());
		meetingEntryImpl.setAttendeePassword(getAttendeePassword());
		meetingEntryImpl.setModeratorPassword(getModeratorPassword());
		meetingEntryImpl.setStatus(getStatus());

		meetingEntryImpl.resetOriginalValues();

		return meetingEntryImpl;
	}

	@Override
	public int compareTo(MeetingEntry meetingEntry) {
		long primaryKey = meetingEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MeetingEntry)) {
			return false;
		}

		MeetingEntry meetingEntry = (MeetingEntry)obj;

		long primaryKey = meetingEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MeetingEntryModelImpl meetingEntryModelImpl = this;

		meetingEntryModelImpl._originalMeetingServerId = meetingEntryModelImpl._meetingServerId;

		meetingEntryModelImpl._setOriginalMeetingServerId = false;

		meetingEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MeetingEntry> toCacheModel() {
		MeetingEntryCacheModel meetingEntryCacheModel = new MeetingEntryCacheModel();

		meetingEntryCacheModel.meetingEntryId = getMeetingEntryId();

		meetingEntryCacheModel.groupId = getGroupId();

		meetingEntryCacheModel.companyId = getCompanyId();

		meetingEntryCacheModel.userId = getUserId();

		meetingEntryCacheModel.userName = getUserName();

		String userName = meetingEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			meetingEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			meetingEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			meetingEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			meetingEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			meetingEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		meetingEntryCacheModel.meetingServerId = getMeetingServerId();

		meetingEntryCacheModel.name = getName();

		String name = meetingEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			meetingEntryCacheModel.name = null;
		}

		meetingEntryCacheModel.attendeePassword = getAttendeePassword();

		String attendeePassword = meetingEntryCacheModel.attendeePassword;

		if ((attendeePassword != null) && (attendeePassword.length() == 0)) {
			meetingEntryCacheModel.attendeePassword = null;
		}

		meetingEntryCacheModel.moderatorPassword = getModeratorPassword();

		String moderatorPassword = meetingEntryCacheModel.moderatorPassword;

		if ((moderatorPassword != null) && (moderatorPassword.length() == 0)) {
			meetingEntryCacheModel.moderatorPassword = null;
		}

		meetingEntryCacheModel.status = getStatus();

		return meetingEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{meetingEntryId=");
		sb.append(getMeetingEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", meetingServerId=");
		sb.append(getMeetingServerId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", attendeePassword=");
		sb.append(getAttendeePassword());
		sb.append(", moderatorPassword=");
		sb.append(getModeratorPassword());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.bbb.model.MeetingEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>meetingEntryId</column-name><column-value><![CDATA[");
		sb.append(getMeetingEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>meetingServerId</column-name><column-value><![CDATA[");
		sb.append(getMeetingServerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attendeePassword</column-name><column-value><![CDATA[");
		sb.append(getAttendeePassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moderatorPassword</column-name><column-value><![CDATA[");
		sb.append(getModeratorPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MeetingEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MeetingEntry.class
		};
	private long _meetingEntryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _meetingServerId;
	private long _originalMeetingServerId;
	private boolean _setOriginalMeetingServerId;
	private String _name;
	private String _attendeePassword;
	private String _moderatorPassword;
	private int _status;
	private long _columnBitmask;
	private MeetingEntry _escapedModel;
}